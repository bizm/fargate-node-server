---
AWSTemplateFormatVersion: 2010-09-09
Description: "Cloudformation test for session integration app"

Parameters:
  Vpc:
    Type: AWS::EC2::VPC::Id
  # TaskDefinitionName:
  #   Type: String
  # TaskDefinitionRevision:
  #   Type: String
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
  # SecurityGroup:
  #   Type: AWS::EC2::SecurityGroup::Id
  Port:
    Type: Number
    Default: 8080
  # CodePipelineRole:
  #   Type: String

Resources:

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ...
      GroupName: session-int-secruity-group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref Port
          ToPort: !Ref Port
          CidrIp: 0.0.0.0/0

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets: !Ref Subnets
      SecurityGroups:
        - !Ref SecurityGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Ref: Vpc
      Protocol: HTTP
      Port: !Ref Port
      TargetType: ip
      Name: session-int-alb
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2

  ListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: !Ref Port
      Protocol: HTTP

  # somehow it always fails to delete cluster because of service being active
  # it fails because wasn't referencing cluster, but was specifying name instead
  # Use '!Ref' !!!
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: session-int-cluster
      Tags:
        - Key: Name
          Value: Session integration cluster

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: session-int-task-role
      AssumeRolePolicyDocument:
        # Version: 2012-10-17
        Version: 2008-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: session-int-log-group

  TaskLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref TaskLogGroup
      LogStreamName: session-int-log-stream

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: session-int
      Cpu: 256
      Memory: 1024
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: session-int-app
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/test/session-int:latest"
          Cpu: 256
          Memory: 1024
          PortMappings:
            - ContainerPort: !Ref Port
              HostPort: !Ref Port
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref TaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref TaskLogStream
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !Ref TaskRole
      ExecutionRoleArn: !Ref TaskRole

  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerHTTP
    Properties:
      ServiceName: session-int-service
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      # TaskDefinition: !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/${TaskDefinitionName}:${TaskDefinitionRevision}"
      # TaskDefinition: !Join
      #   - ''
      #   - - 'arn:aws:ecs:'
      #     - !Ref "AWS::Region"
      #     - ':'
      #     - !Ref "AWS::AccountId"
      #     - ":task-definition/"
      #     - !Ref TaskDefinitionName
      #     - ":"
      #     - !Ref TaskDefinitionRevision
      # task definition should be full ARN including revision, so that stack doesn't get stuck in CREATE_IN_PROGRESS state
      # https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-ecs-service-stabilize/
      # https://stackoverflow.com/questions/32727520/cloudformation-template-for-creating-ecs-service-stuck-in-create-in-progress
      # TaskDefinition: node-server
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - !Ref SecurityGroup
          Subnets: !Ref Subnets
      # not allowed to set load balancer after service is created
      LoadBalancers:
        - ContainerName: session-int-app
          ContainerPort: !Ref Port
          TargetGroupArn: !Ref TargetGroup

  # EcsSecurityGroupIngressFromPublic:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     Description: Ingress from public to node-server
  #     GroupId: !Ref SecurityGroup
  #     IpProtocol: tcp
  #     FromPort: !Ref Port
  #     ToPort: !Ref Port
  #     CidrIp: 0.0.0.0/0

  # Repository:
  #   Type: AWS::ECR::Repository
  #   Properties:
  #     RepositoryName: node-server/codebuild-test-cf
  #
  # DockerBuildProject:
  #   Type: AWS::CodeBuild::Project
  #   DependsOn: Repository
  #   Properties:
  #     Name: node-server-codebuild-test-cf
  #     Artifacts:
  #       Type: CODEPIPELINE
  #     Source:
  #       Type: CODEPIPELINE
  #       BuildSpec: buildspec.yml
  #     SourceVersion: master
  #     ServiceRole: arn:aws:iam::115162817961:role/service-role/codeBuildRole
  #
  #     Environment:
  #       Type: LINUX_CONTAINER
  #       ComputeType: BUILD_GENERAL1_SMALL
  #       # Image: aws/codebuild/amazonlinux2-x86_64-standard:1.0
  #       # Ubuntu image
  #       Image: aws/codebuild/standard:2.0-1.13.0
  #       # privileged mode is required for building docker image
  #       PrivilegedMode: true
  #       EnvironmentVariables:
  #         -
  #           Name: DOCKER_IMAGE_REPO_ARN
  #           Type: PLAINTEXT
  #           Value: !Sub
  #             - "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}:latest"
  #             - { RepositoryName: !Ref Repository }
  #
  #
  # CodePipeline:
  #   Type: AWS::CodePipeline::Pipeline
  #   Properties:
  #     Name: node-server-pipeline
  #     RoleArn: !Sub
  #       - "arn:aws:iam:${AWS::AccountId}:role/service-role/${CodePipelineRole}"
  #     # RoleArn: !Join
  #     #   - ''
  #     #   - - "arn:aws:iam::"
  #     #     - !Ref "AWS::AccountId"
  #     #     - ":role/service-role/"
  #     #     - !Ref CodePipelineRole
  #     Stages:
  #       -
  #         Name: Source
  #         Actions:
  #           -
  #             Name: SourceAction
  #             ActionTypeId:
  #               Category: Source
  #               Owner: ThirdParty
  #               Version: 1
  #               Provider: GitHub
  #             OutputArtifacts:
  #               -
  #                 Name: SourceOutput
  #             Configuration:
  #               Owner: bizm
  #               Repo: fargate-node-server
  #               PollForSourceChanges: false
  #               Branch: master
  #               OAuthToken: "{{resolve:secretsmanager:CICD:SecretString:GitHubAccessToken}}"
  #       -
  #         Name: Build
  #         Actions:
  #           -
  #             Name: DockerBuild
  #             InputArtifacts:
  #               -
  #                 Name: SourceOutput
  #             OutputArtifacts:
  #               -
  #                 Name: BuildOutput
  #             ActionTypeId:
  #               Category: Build
  #               Owner: AWS
  #               Version: 1
  #               Provider: CodeBuild
  #             Configuration:
