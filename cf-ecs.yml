---
AWSTemplateFormatVersion: 2010-09-09
Description: "Cloudformation test for node-server demo app"

Parameters:
  Vpc:
    Type: AWS::EC2::VPC::Id
  TaskDefinitionName:
    Type: String
  TaskDefinitionRevision:
    Type: String
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
  Port:
    Type: Number
    Default: 8080
  CodePipelineRole:
    Type: String

Resources:

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets: !Ref Subnets
      SecurityGroups:
        - !Ref SecurityGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Ref: Vpc
      Protocol: HTTP
      Port: !Ref Port
      TargetType: ip
      Name: node-server-alb
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2

  ListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: !Ref Port
      Protocol: HTTP

  # somehow it always fails to delete cluster because of service being active
  # it fails because wasn't referencing cluster, but was specifying name instead
  # Use '!Ref' !!!
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: node-server-cluster
      Tags:
        - Key: Name
          Value: Node server test cluster

  # task definition is created separately via 'aws ecs'

  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerHTTP
    Properties:
      ServiceName: node-server-service
      Cluster: !Ref Cluster
      TaskDefinition: !Join
        - ''
        - - 'arn:aws:ecs:'
          - !Ref "AWS::Region"
          - ':'
          - !Ref "AWS::AccountId"
          - ":task-definition/"
          - !Ref TaskDefinitionName
          - ":"
          - !Ref TaskDefinitionRevision
      # task definition should be full ARN including revision, so that stack doesn't get stuck in CREATE_IN_PROGRESS state
      # https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-ecs-service-stabilize/
      # https://stackoverflow.com/questions/32727520/cloudformation-template-for-creating-ecs-service-stuck-in-create-in-progress
      # TaskDefinition: node-server
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - !Ref SecurityGroup
          Subnets: !Ref Subnets
      # not allowed to set load balancer after service is created
      LoadBalancers:
        - ContainerName: node
          ContainerPort: !Ref Port
          TargetGroupArn: !Ref TargetGroup

  EcsSecurityGroupIngressFromPublic:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from public to node-server
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: !Ref Port
      ToPort: !Ref Port
      CidrIp: 0.0.0.0/0

  DockerBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: node-server-dockerbuild
      Artifacts:
        -
          Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:1.0
        Type: LINUX_CONTAINER


  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: node-server-pipeline
      RoleArn: !Join
        - ''
        - - "arn:aws:iam::"
          - !Ref "AWS::AccountId"
          - ":role/service-role/"
          - !Ref CodePipelineRole
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                -
                  Name: SourceOutput
              Configuration:
                Owner: bizm
                Repo: fargate-node-server
                PollForSourceChanges: false
                Branch: master
                OAuthToken: "{{resolve:secretsmanager:CICD:SecretString:GitHubAccessToken}}"
        -
          Name: Build
          Actions:
            -
              Name: DockerBuild
              InputArtifacts:
                -
                  Name: SourceOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
